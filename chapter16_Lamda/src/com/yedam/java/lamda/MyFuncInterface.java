package com.yedam.java.lamda;

@FunctionalInterface	//얘가 없으면 추상 매소드가 하나만 있다고 보장할수 없다
public interface MyFuncInterface {		//하나의 함수만 쓸수있게 제한을 건다. 함수 하나만 적으면 빨간줄 사라짐
	public void method();
	//public void method2();	-> 함수 2개 만들면 빨간줄 다시뜸
}

/***
✔람다식
- 자바8 부터 함수적 프로그래밍을 위해 지원하는것. (함수적 프로그래밍 : 함수만 가지고 구성하는 방식)
- 쓰는 이유 : 
	1 코드가 매우 간결해진다 (클래식 선언 하고 코드 적고 불러오고 안해도된다(?))
- ( )-> { ... };   (타입 매개변수, ...) -> {실행문; ...}
	괄호(매개변수가 하나일때)와 중괄호(실행문이 하나일때)는 경우에 따라 생략 가능

-자바에서 메소드는 무조건 클래스안에 있어야된다. 그래서 람다식도 객체가 필요하다.
※ 타겟 타입 : 람다식이 대입되는 인터페이스. 객체를 만들때 사용할 인터페이스이다.

※ 함수적 인터페이스(functional interface) : 함수만 단독으로 사용할수 없기 때문에 얘를 품어줄 객체가 필요하다. 그 객체가 타겟타입. 즉 인터페이스
하나의 추상 메소드만 선언된 인터페이스가 타겟 타입
무조건 하나의 추상메소드만 가지고 있음.

***/